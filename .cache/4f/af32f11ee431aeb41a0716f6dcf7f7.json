{"id":"Focm","dependencies":[{"name":"C:\\Wonyoung's GitHub\\logseq-insert-random-pages\\package.json","includedInParent":true,"mtime":1742246608541},{"name":"@logseq/libs","loc":{"line":1,"column":7,"index":7},"parent":"C:\\Wonyoung's GitHub\\logseq-insert-random-pages\\index.js","resolved":"C:\\Wonyoung's GitHub\\logseq-insert-random-pages\\node_modules\\@logseq\\libs\\dist\\lsplugin.user.js"}],"generated":{"js":"\"use strict\";\n\nrequire(\"@logseq/libs\");\nconst settingsTemplate = [{\n  key: \"keyboard\",\n  type: \"string\",\n  default: \"r t\",\n  description: 'Type in the key or key combination you wish to use to toggle. If you want multiple key combinations, add a space or \"+\" between the keys (\"r n\" or \"ctrl+r\"). \\n\\rIMPORTANT: After changing the hotkey, you must restart Logseq to take effect.',\n  title: \"Keyboard Hotkey\"\n}, {\n  key: \"randomPagesToReturn\",\n  type: \"number\",\n  default: 1,\n  title: \"Number of random pages\",\n  description: \"Number of random pages to return\"\n}, {\n  key: \"headerBlock\",\n  type: \"string\",\n  default: \"\",\n  title: \"Header block\",\n  description: \"Include a header parent block before the random notes. (optional, leave empty to disable)\"\n}, {\n  key: \"sortPages\",\n  type: \"boolean\",\n  default: true,\n  title: \"Sort pages\",\n  description: \"Sort the pages alphabetically\"\n}, {\n  key: \"journalMode\",\n  type: \"enum\",\n  default: \"include\",\n  title: \"Journal mode\",\n  description: \"Select the journal mode\",\n  enumChoices: [\"none\", \"include\", \"only\"],\n  enumPicker: \"radio\"\n}, {\n  key: \"danglingMode\",\n  type: \"enum\",\n  default: \"include\",\n  title: \"Dangling mode\",\n  description: \"Select the dangling mode\",\n  enumChoices: [\"none\", \"include\", \"only\"],\n  enumPicker: \"radio\"\n}, {\n  key: \"namespaceMode\",\n  type: \"enum\",\n  default: \"include\",\n  title: \"Namespace mode\",\n  description: \"Select the namespace mode\",\n  enumChoices: [\"none\", \"include\", \"only\"],\n  enumPicker: \"radio\"\n}, {\n  key: \"propertiesMode\",\n  type: \"enum\",\n  default: \"include\",\n  title: \"Properties mode\",\n  description: \"Select the properties mode\",\n  enumChoices: [\"none\", \"include\", \"only\"],\n  enumPicker: \"radio\"\n}];\nfunction getUniqueRandomPages(pages, count) {\n  const shuffled = pages.sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n}\nfunction filterPagesByFilter(pages, filter, condition) {\n  return pages.filter(page => {\n    return condition ? Boolean(page[filter]) : !page[filter];\n  });\n}\nasync function insertPageLink(page) {\n  if (page && page.name) {\n    const currBlock = await logseq.Editor.getCurrentBlock();\n    const currentBlock = (currBlock === null || currBlock === void 0 ? void 0 : currBlock.uuid) || null;\n    const blockContent = `[[${page.originalName}]]`;\n    await logseq.Editor.insertBlock(currentBlock, blockContent, {\n      sibling: true,\n      before: true,\n      focus: true\n    });\n  }\n}\nasync function openRandomNote() {\n  const randomPagesToReturn = Math.max(1, parseInt(logseq.settings.randomPagesToReturn || 1));\n  const sortPages = logseq.settings.sortPages;\n  const journalMode = logseq.settings.journalMode;\n  const danglingMode = logseq.settings.danglingMode;\n  const namespaceMode = logseq.settings.namespaceMode;\n  const propertiesMode = logseq.settings.propertiesMode;\n  try {\n    const ret = await logseq.Editor.getAllPages();\n    const pages = (ret === null || ret === void 0 ? void 0 : ret.flat()) || [];\n    if (pages.length === 0) {\n      return logseq.UI.showMsg(\"No pages found\", \"warning\");\n    }\n    if (journalMode === \"only\") {\n      pages = filterPagesByFilter(pages, \"journal?\", true);\n    } else if (journalMode === \"none\") {\n      pages = filterPagesByFilter(pages, \"journal?\", false);\n    }\n    if (danglingMode === \"only\") {\n      pages = filterPagesByFilter(pages, \"file\", false);\n    } else if (danglingMode === \"none\") {\n      pages = filterPagesByFilter(pages, \"file\", true);\n    }\n    if (namespaceMode === \"only\") {\n      pages = filterPagesByFilter(pages, \"namespace\", true);\n    } else if (namespaceMode === \"none\") {\n      pages = filterPagesByFilter(pages, \"namespace\", false);\n    }\n    if (propertiesMode === \"only\") {\n      pages = filterPagesByFilter(pages, \"properties\", true);\n    } else if (propertiesMode === \"none\") {\n      pages = filterPagesByFilter(pages, \"properties\", false);\n    }\n    let selectedPages = getUniqueRandomPages(pages, Math.min(randomPagesToReturn, pages.length));\n    if (sortPages) {\n      selectedPages = selectedPages.sort((a, b) => {\n        const nameA = a.originalName.toLowerCase();\n        const nameB = b.originalName.toLowerCase();\n        return nameA.localeCompare(nameB);\n      });\n    }\n    const headerBlockContent = (logseq.settings.headerBlock || \"\").trim();\n    if (headerBlockContent) {\n      const batchBlock = {\n        content: headerBlockContent,\n        children: selectedPages.map(page => ({\n          content: `[[${page.originalName}]]`\n        }))\n      };\n      const currBlock = await logseq.Editor.getCurrentBlock();\n      const currentBlock = (currBlock === null || currBlock === void 0 ? void 0 : currBlock.uuid) || null;\n      await logseq.Editor.insertBatchBlock(currentBlock, batchBlock, {\n        sibling: true,\n        before: true,\n        focus: true\n      });\n    } else {\n      for (const page of selectedPages) {\n        await insertPageLink(page);\n      }\n    }\n  } catch (err) {\n    logseq.UI.showMsg(err.message || \"Something went wrong with the query\", \"error\");\n    console.error(err);\n  }\n}\nfunction main() {\n  logseq.provideModel({\n    handleRandomPages: openRandomNote\n  });\n  logseq.Editor.registerSlashCommand(\"ðŸŽ² Random Note\", openRandomNote);\n  logseq.App.registerUIItem(\"toolbar\", {\n    key: \"RandomPages\",\n    template: `\n      <span class=\"logseq-insert-random-pages-toolbar\">\n        <a title=\"Insert random pages (r t)\" class=\"button\" data-on-click=\"handleRandomPages\">\n          <i class=\"ti ti-dice-5\"></i>\n        </a>\n      </span>\n    `\n  });\n  logseq.App.registerCommandPalette({\n    key: \"logseq-insert-random-pages\",\n    label: \"Insert Random Pages\",\n    keybinding: {\n      mode: \"non-editing\",\n      binding: logseq.settings.keyboard || \"r t\"\n    }\n  }, () => {\n    openRandomNote();\n  });\n}\nlogseq.useSettingsSchema(settingsTemplate).ready(main).catch(console.error);"},"sourceMaps":null,"error":null,"hash":"e7baf569fe5c4d63574d7e328ce94e99","cacheData":{"env":{}}}